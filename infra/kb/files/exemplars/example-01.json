{
  "description": "Minimal fintech app with localStorage and fetch usage",
  "files": [
    {
      "path": "src/storage.js",
      "content": "// User data storage\nlocalStorage.setItem('email', user.email);\nlocalStorage.setItem('preferences', JSON.stringify(userPrefs));\n\n// Retrieve user data\nconst email = localStorage.getItem('email');\nconst prefs = JSON.parse(localStorage.getItem('preferences') || '{}');"
    },
    {
      "path": "src/api.js",
      "content": "// Transaction processing\nasync function processTransaction(transaction) {\n  const response = await fetch('/api/charge', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      ssn: user.ssn,\n      amount: transaction.amount,\n      merchant: transaction.merchant\n    })\n  });\n  return response.json();\n}\n\n// Get user account\nasync function getAccount() {\n  const response = await fetch('/api/account', {\n    headers: { 'Authorization': `Bearer ${token}` }\n  });\n  return response.json();\n}"
    },
    {
      "path": "src/database.js",
      "content": "// Database operations\nconst db = require('sqlite3');\n\n// Insert transaction\nfunction insertTransaction(txn) {\n  const stmt = db.prepare('INSERT INTO transactions (user_id, amount, merchant, category) VALUES (?, ?, ?, ?)');\n  stmt.run(txn.user_id, txn.amount, txn.merchant, txn.category);\n}\n\n// Get user transactions\nfunction getUserTransactions(userId) {\n  return db.all('SELECT * FROM transactions WHERE user_id = ?', [userId]);\n}\n\n// Update user profile\nfunction updateUserProfile(userId, profile) {\n  const stmt = db.prepare('UPDATE users SET name = ?, email = ?, phone = ? WHERE id = ?');\n  stmt.run(profile.name, profile.email, profile.phone, userId);\n}"
    }
  ],
  "metadata": {
    "repo_url": "https://github.com/example/fintech-app",
    "commit_hash": "abc123def456",
    "scan_timestamp": "2024-01-15T10:30:00Z",
    "files_scanned": 3
  }
}
